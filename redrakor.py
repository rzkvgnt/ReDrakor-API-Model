# -*- coding: utf-8 -*-
"""redrakor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11HXX9KEjzG0vPldpyINLaChJTRy0GCLf
"""

import numpy as np 
import pandas as pd 
import seaborn as sns
from matplotlib import pyplot as plt
import  re

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

import os
from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/SBP/top100_kdrama - top100_kdrama.csv')

df.head()

df.isnull().sum()

df[df['Number of Episode'] == 'Unknow'].head(3)

df.loc[(df['Genre'] == 'Romance') & (df['Number of Episode'] == 'Unknow'), 'Number of Episode'] = '1'
df.loc[(df['Network'] == 'tvN') & (df['Number of Episode'] == 'Unknow'), 'Number of Episode'] = '1'
df.loc[(df['Network'] == 'Netflix') & (df['Number of Episode'] == 'Unknow'), 'Number of Episode'] = '1'

known_df = {'Move to Heaven':10, 'Hospital Playlist':12, 'Flower of Evil':16, 'My Mister':16, 'Reply 1988':20, 'Signal':16, 'Navillera':12
            ,'Mr. Queen':20, 'Kingdom':6}

for k,v in known_df.items():
  df.loc[df['Name']==k,'Number of Episode']=v

df['Number of Episode'] = df['Number of Episode'].map(lambda x:np.nan if x=='Unknow' else x)

df['Number of Episode'].fillna(df['Number of Episode'].median(), inplace = True)

pd.get_dummies(df[['Network']]).head()

df['Rating'] = df['Rating'].astype(float)
df['Rating'].fillna(df['Rating'].median(), inplace = True)
df['Year of release'] = df['Year of release'].astype(float)

df_features = pd.concat([df['Genre'].str.get_dummies(sep=','),
                         pd.get_dummies(df[['Network']]),
                         df[['Rating']],df[['Year of release']],df[['Number of Episode']]],axis=1)

df['Name'] = df['Name'].map(lambda Name:re.sub('[^A-Za-z0-9]+',' ', Name))
df_features.head()

df_features.columns

from sklearn.preprocessing import MinMaxScaler

min_max_scaler = MinMaxScaler()
df_features = min_max_scaler.fit_transform(df_features)

np.round(df_features, 2)

from sklearn.neighbors import NearestNeighbors

nbrs =NearestNeighbors(n_neighbors=6, algorithm='ball_tree').fit(df_features)

distances, indices = nbrs.kneighbors(df_features)

def get_index_from_name(Name):
  search_result = df[df['Name']==Name].index.tolist()
  if not search_result:
    return -1
  return search_result[0]

all_drama_names = list(df.Name.values)

def get_id_from_partial_name(partial):
  for Name in all_drama_names:
    if partial in Name:
      print(Name,all_drama_names.index(Name))

def print_similar_drama(query=None, rank=None):
  if rank:
    for rank in indices[rank][1:]:
      print(df.iloc[rank]['Name'])
  if query:
    found_rank = get_index_from_name(query)
    for rank in indices[found_rank][1:]:
      print(df.iloc[rank]['Name'])

print_similar_drama('Move to Heaven')

print_similar_drama('W')

get_id_from_partial_name('W')

import pickle

# Save the model to a file
with open('model.pkl', 'wb') as f:
  pickle.dump(print_similar_drama ,f)

# Load the model from the file
with open('model.pkl', 'rb') as f:
  model = pickle.load(f)

model('W')

import joblib

# Save the model to a file
joblib.dump(print_similar_drama, 'model.joblib')

import joblib

# Load the model from the file
model = joblib.load('model.joblib')

model('Move to Heaven')

